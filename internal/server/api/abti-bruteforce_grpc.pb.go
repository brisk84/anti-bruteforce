// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/abti-bruteforce.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBruteforceClient is the client API for AntiBruteforce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteforceClient interface {
	Login(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*Error, error)
	Reset(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*Error, error)
	AddToBlackList(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Error, error)
	AddToWhiteList(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Error, error)
	DelFromBlackList(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Error, error)
	DelFromWhiteList(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Error, error)
}

type antiBruteforceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteforceClient(cc grpc.ClientConnInterface) AntiBruteforceClient {
	return &antiBruteforceClient{cc}
}

func (c *antiBruteforceClient) Login(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/AntiBruteforce.AntiBruteforce/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) Reset(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/AntiBruteforce.AntiBruteforce/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AddToBlackList(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/AntiBruteforce.AntiBruteforce/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AddToWhiteList(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/AntiBruteforce.AntiBruteforce/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) DelFromBlackList(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/AntiBruteforce.AntiBruteforce/DelFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) DelFromWhiteList(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/AntiBruteforce.AntiBruteforce/DelFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteforceServer is the server API for AntiBruteforce service.
// All implementations must embed UnimplementedAntiBruteforceServer
// for forward compatibility
type AntiBruteforceServer interface {
	Login(context.Context, *LoginInfo) (*Error, error)
	Reset(context.Context, *LoginInfo) (*Error, error)
	AddToBlackList(context.Context, *NetworkInfo) (*Error, error)
	AddToWhiteList(context.Context, *NetworkInfo) (*Error, error)
	DelFromBlackList(context.Context, *NetworkInfo) (*Error, error)
	DelFromWhiteList(context.Context, *NetworkInfo) (*Error, error)
	mustEmbedUnimplementedAntiBruteforceServer()
}

// UnimplementedAntiBruteforceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteforceServer struct {
}

func (UnimplementedAntiBruteforceServer) Login(context.Context, *LoginInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAntiBruteforceServer) Reset(context.Context, *LoginInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedAntiBruteforceServer) AddToBlackList(context.Context, *NetworkInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedAntiBruteforceServer) AddToWhiteList(context.Context, *NetworkInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedAntiBruteforceServer) DelFromBlackList(context.Context, *NetworkInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFromBlackList not implemented")
}
func (UnimplementedAntiBruteforceServer) DelFromWhiteList(context.Context, *NetworkInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFromWhiteList not implemented")
}
func (UnimplementedAntiBruteforceServer) mustEmbedUnimplementedAntiBruteforceServer() {}

// UnsafeAntiBruteforceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteforceServer will
// result in compilation errors.
type UnsafeAntiBruteforceServer interface {
	mustEmbedUnimplementedAntiBruteforceServer()
}

func RegisterAntiBruteforceServer(s grpc.ServiceRegistrar, srv AntiBruteforceServer) {
	s.RegisterService(&AntiBruteforce_ServiceDesc, srv)
}

func _AntiBruteforce_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce.AntiBruteforce/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).Login(ctx, req.(*LoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce.AntiBruteforce/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).Reset(ctx, req.(*LoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce.AntiBruteforce/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AddToBlackList(ctx, req.(*NetworkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce.AntiBruteforce/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AddToWhiteList(ctx, req.(*NetworkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_DelFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).DelFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce.AntiBruteforce/DelFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).DelFromBlackList(ctx, req.(*NetworkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_DelFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).DelFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce.AntiBruteforce/DelFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).DelFromWhiteList(ctx, req.(*NetworkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteforce_ServiceDesc is the grpc.ServiceDesc for AntiBruteforce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteforce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AntiBruteforce.AntiBruteforce",
	HandlerType: (*AntiBruteforceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AntiBruteforce_Login_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _AntiBruteforce_Reset_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _AntiBruteforce_AddToBlackList_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _AntiBruteforce_AddToWhiteList_Handler,
		},
		{
			MethodName: "DelFromBlackList",
			Handler:    _AntiBruteforce_DelFromBlackList_Handler,
		},
		{
			MethodName: "DelFromWhiteList",
			Handler:    _AntiBruteforce_DelFromWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/abti-bruteforce.proto",
}
